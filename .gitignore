import os
import json
from datetime import datetime, date

# File path for storing tasks
TASKS_FILE = "tasks.json"

class CustomEncoder(json.JSONEncoder):
    """Custom JSON encoder to handle datetime.date objects."""

    def default(self, obj):
        if isinstance(obj, date):
            return obj.isoformat()
        return super().default(obj)

def load_tasks():
    """Load tasks from the file."""
    if os.path.exists(TASKS_FILE):
        with open(TASKS_FILE, "r") as file:
            return json.load(file)
    return {"tasks": []}

def save_tasks(tasks):
    """Save tasks to the file."""
    with open(TASKS_FILE, "w") as file:
        json.dump(tasks, file, indent=4, cls=CustomEncoder)

def add_task(tasks, description, priority, due_date=None):
    """Add a new task."""
    task = {"description": description, "priority": priority, "completed": False}
    if due_date:
        task["due_date"] = due_date
    tasks["tasks"].append(task)
    save_tasks(tasks)

def remove_task(tasks, index):
    """Remove a task by its index."""
    del tasks["tasks"][index]
    save_tasks(tasks)

def mark_task_completed(tasks, index):
    """Mark a task as completed."""
    tasks["tasks"][index]["completed"] = True
    save_tasks(tasks)

def display_tasks(tasks):
    """Display tasks in a list with details."""
    print("Tasks:")
    for i, task in enumerate(tasks["tasks"]):
        status = "Completed" if task["completed"] else "Pending"
        due_date = task.get("due_date", "None")
        print(f"{i+1}. {task['description']} - Priority: {task['priority']} - Status: {status} - Due Date: {due_date}")

def main():
    tasks = load_tasks()

    while True:
        print("\n===== To-Do List Menu =====")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. Mark Task as Completed")
        print("4. View Tasks")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            description = input("Enter task description: ")
            priority = input("Enter task priority (high/medium/low): ")
            due_date = input("Enter due date (optional, format: YYYY-MM-DD): ")
            if due_date:
                due_date = datetime.strptime(due_date, "%Y-%m-%d").date()
            add_task(tasks, description, priority, due_date)
            print("Task added successfully!")
        elif choice == "2":
            display_tasks(tasks)
            index = int(input("Enter task number to remove: ")) - 1
            remove_task(tasks, index)
            print("Task removed successfully!")
        elif choice == "3":
            display_tasks(tasks)
            index = int(input("Enter task number to mark as completed: ")) - 1
            mark_task_completed(tasks, index)
            print("Task marked as completed!")
        elif choice == "4":
            display_tasks(tasks)
        elif choice == "5":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

if _name_ == "_main_":
    main()
